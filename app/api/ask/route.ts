export const runtime = "nodejs";

import { NextResponse } from "next/server";
import { askGemini } from "@/lib/gemini";
// import { askGPT } from "@/lib/gpt"; // –ø–æ –∏–∑–±–æ—Ä, fallback
import { processFiles } from "@/core-ai/processFiles";

export async function POST(req: Request) {
  try {
    const formData = await req.formData();
    const question = formData.get("question") as string | null;

    const rawFiles = formData.getAll("attachments");
    const files = rawFiles.filter((f): f is File => f instanceof File);

    if (!question) {
      return NextResponse.json({ error: "Missing question" }, { status: 400 });
    }

    // üîé –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–µ (OCR, PDF, DOCX –∏ –¥—Ä.)
    let context = "";
    try {
      const fileTexts = await processFiles(files);
      context = fileTexts.join("\n\n");
    } catch (err) {
      console.warn("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ:", err);
      context = "‚ö†Ô∏è –ù—è–∫–æ–∏ —Ñ–∞–π–ª–æ–≤–µ –Ω–µ –º–æ–∂–∞—Ö–∞ –¥–∞ –±—ä–¥–∞—Ç –ø—Ä–æ—á–µ—Ç–µ–Ω–∏.";
    }

    const finalQuestion = `${question}\n\nüìé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø—Ä–∏–∫–∞—á–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:\n${context}`;

    console.log("üß† –í—ä–ø—Ä–æ—Å, –∏–∑–ø—Ä–∞—Ç–µ–Ω –∫—ä–º Gemini:\n", finalQuestion);

    let answer: string;
    try {
      answer = await askGemini(finalQuestion, files);
    } catch (err) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç–≤–∞–Ω–µ –∫—ä–º Gemini:", err);
      answer = "‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–µ–Ω –æ–ø–∏—Ç –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç AI.";
      // –ü–æ –∏–∑–±–æ—Ä: fallback –∫—ä–º OpenAI
      // answer = await askGPT(finalQuestion, files);
    }

    console.log("üì¨ –û—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini:\n", answer);

    return NextResponse.json({ answer });
  } catch (err) {
    console.error("‚ùå Server Error in /api/ask:", err);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}
